limits = c(0, .001),
low = "darkslategray4",
high = "gray75"
) +
labs(
y = "Jane Austen",
x = NULL
) +
facet_wrap(~author) +
theme(
legend.position = "none"
)
frequency |>
ggplot(aes(proportion, jane_austen, color = abs(jane_austen- proportion))) +
geom_abline(
color = "gray40",
linetype = 2
) +
geom_jitter(
alpha = .1,
size = 2.5,
width = .3,
height = .3
) +
geom_text(
aes(label = word),
check_overlap = TRUE,
width = .3,
height = .3,
vjust = 1.5
) +
scale_x_log10(
labels = scales::percent_format()
) +
scale_y_log10(
labels = scales::percent_format()
) +
scale_color_gradient(
limits = c(0, .001),
low = "darkslategray4",
high = "gray75"
) +
labs(
y = "Jane Austen",
x = NULL
) +
facet_wrap(~author) +
theme(
legend.position = "none"
) +
theme_minimal()
frequency |>
ggplot(aes(proportion, jane_austen, color = abs(jane_austen- proportion))) +
geom_abline(
color = "gray40",
linetype = 2
) +
geom_jitter(
alpha = .1,
size = 2.5,
width = .3,
height = .3
) +
geom_text(
aes(label = word),
check_overlap = TRUE,
width = .3,
height = .3,
vjust = 1.5
) +
scale_x_log10(
labels = scales::percent_format()
) +
scale_y_log10(
labels = scales::percent_format()
) +
scale_color_gradient(
limits = c(0, .001),
low = "darkslategray4",
high = "gray75"
) +
labs(
y = "Jane Austen",
x = NULL
) +
facet_wrap(~author) +
theme_minimal() +
theme(
legend.position = "none"
)
cor.test(data = frequency[frequency$author == "BrontÃ« Sisters",],
~ proportion + jane_austen)
cor.test(data = frequency[frequency$author == "H.G Wells",],
~ proportion + jane_austen)
cor.test(data = frequency[frequency$author == "H.G. Wells",],
~ proportion + jane_austen)
# Sentiment Analysis -----------------------------------------------
sentiments
# Sentiment Analysis -----------------------------------------------
sentiments |>
count(sentiment)
get_sentiments()
get_sentiments("afinn")
install.packages("textdata")
# Sentiment Analysis -----------------------------------------------
sentiments
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
# Sentiment Analysis -----------------------------------------------
sentiments
get_sentiments()
get_sentiments("afinn")
get_sentiments("nrc")
stop_words
# Sentiment Analysis -----------------------------------------------
get_sentiments("nrc")
# Sentiment Analysis -----------------------------------------------
get_sentiments("nrc") |>
filter(sentiment == "joy")
# Sentiment Analysis -----------------------------------------------
tidy_books |>
filter(book == "Emma")
# Sentiment Analysis -----------------------------------------------
tidy_books |>
filter(book == "Emma") |>
inner_join(
get_sentiments("nrc") |>
filter(sentiment == "joy"),
join_by(word)
) |>
count(word, sort = TRUE)
get_sentiments("bing")
tidy_books |>
inner_join(get_sentiments("bing"))
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(book, index = line_number %/% 80, sentiment)
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(book, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n,
values_fill = 0
) |>
mutate(
sentiment = positive - negative
)
janeaustensentiment <- tidy_books |>
inner_join(get_sentiments("bing")) |>
count(book, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n,
values_fill = 0
) |>
mutate(
sentiment = positive - negative
)
renv::status()
renv::snapshot()
janeaustensentiment <- tidy_books |>
inner_join(get_sentiments("bing")) |>
count(book, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n,
values_fill = 0
) |>
mutate(
sentiment = positive - negative
)
janeaustensentiment <- tidy_books |>
inner_join(
get_sentiments("bing"),
join_by(word)
) |>
count(book, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n,
values_fill = 0
) |>
mutate(
sentiment = positive - negative
)
janeaustensentiment
ggplot(
janeaustensentiment,
aes(index, sentiment, fill = book)
) +
geom_col(
show.legend = FALSE
)
ggplot(
janeaustensentiment,
aes(index, sentiment, fill = book)
) +
geom_col(
show.legend = FALSE
) +
facet_wrap(~book, scales = "free")
pride_prejudice <- tidy_books |>
filter(book == "Pride & Prejudice")
pride_prejudice
?count
janeaustensentiment
tidy_books
tidy_books |>
arrange(line_number)
1%/%80
2%/%80
3%/%80
r%/%80
80%/%80
85%/%80
original_books
original_books |> arrange(line_number, book)
original_books |> arrange(line_number)
original_books |> arrange(book, line_number)
original_books |> count(book, line_number)
pride_prejudice |>
inner_join(get_sentiments("afinn"))
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
group_by(
index = line_number %/% 80
)
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
group_by(
mana = line_number %/% 80
)
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
group_by(
index = line_number %/% 80
)
tidy_books |>
inner_join(
get_sentiments("bing"),
join_by(word)
) |>
count(book, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n,
values_fill = 0
) |>
mutate(
sentiment = positive - negative
)
tidy_books |>
inner_join(
get_sentiments("bing"),
join_by(word)
) |>
count(book, index = line_number %/% 80, sentiment)
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
group_by(
index = line_number %/% 80
)
tidy_books |>
inner_join(
get_sentiments("bing"),
join_by(word)
)
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
summarize(
.by = c(index = line_number %/%  80),
sentiment = sum(score)
)
pride_prejudice
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
summarize(
.by = c(index = line_number %/%  80),
sentiment = sum(score)
)
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
group_by(index = line_number %/%  80)
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
group_by(index = line_number %/%  80) |>
summarize(sentiment = sum(score))
pride_prejudice |>
inner_join(get_sentiments("afinn"))
pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
group_by(index = line_number %/%  80) |>
summarize(sentiment = sum(value)) |>
mutate(
method = "AFINN"
)
afinn <- pride_prejudice |>
inner_join(get_sentiments("afinn")) |>
group_by(index = line_number %/%  80) |>
summarize(sentiment = sum(value)) |>
mutate(
method = "AFINN"
)
pride_prejudice |>
inner_join(get_sentiments("bing"))
pride_prejudice |>
inner_join(get_sentiments("nrc"))
bind_rows(
pride_prejudice |>
inner_join(get_sentiments("bing")) |>
mutate(method = "Bing et al."),
pride_prejudice |>
inner_join(get_sentiments("nrc")) |>
filter(sentiment %in% c("positive", "negative")) |>
mutate(method = "nrc")
)
bing_nrc <- bind_rows(
pride_prejudice |>
inner_join(get_sentiments("bing")) |>
mutate(method = "Bing et al."),
pride_prejudice |>
inner_join(get_sentiments("nrc")) |>
filter(sentiment %in% c("positive", "negative")) |>
mutate(method = "nrc")
)
bing_nrc |>
count(method, index = line_number %/% 80, sentiment)
bing_nrc |>
count(method, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n
)
bing_nrc |>
count(method, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n
) |>
mutate(sentiment = positive - negative)
bing_nrc |>
count(method, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n
) |>
mutate(sentiment = positive - negative)
bing_nrc <- bing_nrc |>
count(method, index = line_number %/% 80, sentiment) |>
pivot_wider(
names_from = sentiment,
values_from = n
) |>
mutate(sentiment = positive - negative)
afinn
bing_nrc |>
relocate(
index, sentiment, method
)
bing_nrc |>
relocate(
index, sentiment, method
) |>
select(1:3)
afinn |>
bind_rows(
bing_nrc |>
relocate(
index, sentiment, method
) |>
select(1:3)
) |>
ggplot(
aes(index, sentiment, fill = method)
) +
geom_col(show.legend = FALSE)
afinn |>
bind_rows(
bing_nrc |>
relocate(
index, sentiment, method
) |>
select(1:3)
) |>
ggplot(
aes(index, sentiment, fill = method)
) +
geom_col(show.legend = FALSE) +
facet_wrap(
~method,
scales = "free_y"
)
afinn |>
bind_rows(
bing_nrc |>
relocate(
index, sentiment, method
) |>
select(1:3)
) |>
ggplot(
aes(index, sentiment, fill = method)
) +
geom_col(show.legend = FALSE) +
facet_wrap(
~method,
scales = "free_y",
nrow = 3
)
renv::status()
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE)
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE) |>
ungroup()
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE) |>
group_by(sentiment) |>
top_n(10) |>
ungroup() |>
mutate(word = reorder(word, n))
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE) |>
group_by(sentiment) |>
top_n(10) |>
mutate(word = reorder(word, n))
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE) |>
group_by(sentiment) |>
top_n(10) |>
mutate(word = reorder(word, n)) |>
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y")
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE) |>
group_by(sentiment) |>
top_n(10) |>
mutate(word = reorder(word, n)) |>
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
coord_flip()
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE) |>
group_by(sentiment) |>
top_n(10) |>
mutate(word = reorder(word, n)) |>
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(
y = "Contribution to sentiment",
x = NULL
) +
coord_flip()
custom_stop_words <- tibble(
word = "miss",
lexicon = "custom"
) |>
bind_rows(stop_words)
custom_stop_words
install.packages("wordcloud2")
renv::snapshot()
renv::status
renv::status()
## Wordcloud ------------
tidy_books |>
anti_join(stop_words) |>
count(word)
?wordcloud2::wordcloud2()
## Wordcloud ----------------------------------------------------------
tidy_books |>
anti_join(stop_words) |>
count(word) |>
wordcloud2::wordcloud2(word, size = n)
## Wordcloud ----------------------------------------------------------
tidy_books |>
anti_join(stop_words) |>
count(word) |>
wordcloud2::wordcloud2(word)
install.packages("wordcloud")
## Wordcloud ----------------------------------------------------------
library(wordcloud)
tidy_books |>
anti_join(stop_words) |>
count(word) |>
wordcloud(word, n, max.words = 100)
tidy_books |>
anti_join(stop_words) |>
count(word) |>
with(wordcloud(word, n, max.words = 100))
tidy_books |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE)
?unnest_tokens()
tibble(
text = pride_prejudice
)
tibble(
text = pride_prejudice
) |>
unnest_tokens(sentence, text, token = "sentences")
